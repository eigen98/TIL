//
//  main.swift
//  BJ1107
//
//  Created by JeongMin Ko on 2023/01/23.
//
/*
 문제
 수빈이는 TV를 보고 있다. 수빈이는 채널을 돌리려고 했지만, 버튼을 너무 세게 누르는 바람에, 일부 숫자 버튼이 고장났다.

 리모컨에는 버튼이 0부터 9까지 숫자, +와 -가 있다. +를 누르면 현재 보고있는 채널에서 +1된 채널로 이동하고, -를 누르면 -1된 채널로 이동한다. 채널 0에서 -를 누른 경우에는 채널이 변하지 않고, 채널은 무한대 만큼 있다.

 수빈이가 지금 이동하려고 하는 채널은 N이다. 어떤 버튼이 고장났는지 주어졌을 때, 채널 N으로 이동하기 위해서 버튼을 최소 몇 번 눌러야하는지 구하는 프로그램을 작성하시오.

 수빈이가 지금 보고 있는 채널은 100번이다.


 
 입력
 첫째 줄에 수빈이가 이동하려고 하는 채널 N (0 ≤ N ≤ 500,000)이 주어진다.  둘째 줄에는 고장난 버튼의 개수 M (0 ≤ M ≤ 10)이 주어진다. 고장난 버튼이 있는 경우에는 셋째 줄에는 고장난 버튼이 주어지며, 같은 버튼이 여러 번 주어지는 경우는 없다.

 출력
 첫째 줄에 채널 N으로 이동하기 위해 버튼을 최소 몇 번 눌러야 하는지를 출력한다.

 예제 입력 1
 5457
 3
 6 7 8
 예제 출력 1
 6
 
 예제 입력 2
 100
 5
 0 1 2 3 4
 예제 출력 2
 0
 
 예제 입력 3
 500000
 8
 0 2 3 4 6 7 8 9
 예제 출력 3
 11117
 
 예제 입력 4
 100
 3
 1 0 5
 예제 출력 4
 0
 
 
 예제 입력 5
 14124
 0
 예제 출력 5
 5
 예제 입력 6
 1
 9
 1 2 3 4 5 6 7 8 9
 예제 출력 6
 2
 예제 입력 7
 80000
 2
 8 9
 예제 출력 7
 2228
 */

/*
 500000
 1 2 3 4 5.  7 ,,,
 
 각 자리수 마다 가장 차이가 작은 숫자 찾기
 4 , 1 or 9 앞자리가 차이가 난다면 9 not 1
 */

var n = Int(String(readLine()!))!
let m = Int(String(readLine()!))!
var arr: [Int] = []
if m != 0 {
    arr = readLine()!.split(separator: " ").map{Int(String($0))!}
}
//0부터 1000000까지의 모든 채널을 다 이동해보면서 n까지 가장 조금이동해서 도달할수있는 경우를 저장하고 출력.

var minCnt = abs(n - 100) //+ 또는 -만 눌렀을 때 나올 수 있는 결과의 최대값임.
for i in 0...1000000 {
    //수빈이가 이동하려고하는 최대채널은 500000이지만,
    //채널이 무한대만큼 있다는 힌트를보고 생각해보면 500000보다 큰 수에서 뺄수도 있겟다 싶은데
    //극단적으로 설명하면 1에서 500000가는 것보다는 999000에서 500000가는게 더 가깝다.
    //그래서 0에서 500000을 가는 경우와 1000000에서 500000을 가는 경우를 모두 고려해야함.
    let len = check(i)
    if len > 0 {
        let press = abs(n - i) //+또는 -버튼을 눌렀을때의 경우가된다.(i만큼의 번호로 이동했기때문)
        minCnt = min(minCnt, len + press)
    }
}
print(minCnt)
 
//이동하려는 채널의 리모콘 클릭횟수
func check(_ i: Int) -> Int{
    var n = i
    //n이 0이면 0번으로 이동한다는 말인데 0버튼이 부셔졌으면 0을리턴 아니면 1을리턴
    if n == 0 {
        if arr.contains(0) {
            return 0
        }else{
            return 1
        }
    }
    
    var len = 0
    //n에서 누를 번호가 고장났는지를 판단해서 고장났으면 못누르니까 0리턴
    //고장안났으면 누를거니까 len에 +1
    while n > 0 {
        if arr.contains(n % 10) {return 0}
        n = n / 10
        len += 1
    }
    return len
}
